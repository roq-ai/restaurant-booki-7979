generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model guest {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  price         Int
  description   String?    @db.VarChar(255)
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total_price                  Int
  status                       String   @db.VarChar(255)
  customer_id                  String   @db.Uuid
  waiter_id                    String   @db.Uuid
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  user_order_customer_idTouser user     @relation("order_customer_idTouser", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_order_waiter_idTouser   user     @relation("order_waiter_idTouser", fields: [waiter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date             DateTime   @db.Timestamp(6)
  number_of_people Int
  customer_id      String     @db.Uuid
  restaurant_id    String     @db.Uuid
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  user             user       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar(255)
  address     String        @db.VarChar(255)
  capacity    Int
  owner_id    String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  menu        menu[]
  reservation reservation[]
  user        user          @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                         String        @unique @db.VarChar(255)
  firstName                     String?       @db.VarChar(255)
  lastName                      String?       @db.VarChar(255)
  roq_user_id                   String        @db.VarChar(255)
  tenant_id                     String        @db.VarChar(255)
  created_at                    DateTime      @default(now()) @db.Timestamp(6)
  updated_at                    DateTime      @default(now()) @db.Timestamp(6)
  guest                         guest[]
  order_order_customer_idTouser order[]       @relation("order_customer_idTouser")
  order_order_waiter_idTouser   order[]       @relation("order_waiter_idTouser")
  reservation                   reservation[]
  restaurant                    restaurant[]
}
